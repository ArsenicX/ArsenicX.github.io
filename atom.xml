<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://ArsenicX.github.io/</id>
    <title>ArsenicX</title>
    <updated>2020-02-14T05:30:49.712Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://ArsenicX.github.io/"/>
    <link rel="self" href="https://ArsenicX.github.io/atom.xml"/>
    <subtitle>&lt;a href=&quot;https://github.com/ArsenicX&quot; target=&quot;_blank&quot;&gt;My Github&lt;/a&gt;</subtitle>
    <logo>https://ArsenicX.github.io/images/avatar.png</logo>
    <icon>https://ArsenicX.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, ArsenicX</rights>
    <entry>
        <title type="html"><![CDATA[泛型]]></title>
        <id>https://ArsenicX.github.io/fan-xing</id>
        <link href="https://ArsenicX.github.io/fan-xing">
        </link>
        <updated>2020-02-14T03:46:19.000Z</updated>
        <content type="html"><![CDATA[<h1 id="为什么需要泛型">为什么需要泛型</h1>
<p>譬如我们需要一个数组类IntList，它存放int类型，并且有我们自定义的增加、删除、排序功能。<br>
后来我们发现只有一个int类型的数组不够，我们还需要一个有同样功能的数组类StringList，那么这时候就要再new一个class文件，这就十分繁琐了<br>
泛型就是解决这个问题的。它在定义时可以告诉编译器：我不把其中的参数类型写死，它可以是int、String等等，这个由我以后使用的时候决定</p>
<h1 id="泛型怎么使用">泛型怎么使用</h1>
<h2 id="在定义的时候">在定义的时候</h2>
<p>如果当前的类有可能会需要用到多种数据类型，那这个时候就要在class上注明&lt;T&gt;。例如：</p>
<pre><code class="language-java">public class MyList&lt;T&gt;{ 
    //key这个成员变量的类型为T,T的类型由外部指定  
    private T key;

    public MyList(T key) { //泛型构造方法形参key的类型也为T，T的类型由外部指定
        this.key = key;
    }

    public T getKey(){ //泛型方法getKey的返回值类型为T，T的类型由外部指定
        return key;
    }
}
</code></pre>
<h2 id="在使用的时候">在使用的时候</h2>
<ol>
<li>创建泛型类对象：泛型写实际使用的参数<code>MyList&lt;String&gt; myList = new MyList&lt;String&gt;(&quot;字符串&quot;);</code></li>
<li>使用泛型类对象作为参数：<br>
如果能确定将接收到的泛型类的参数，就直接指定好：<code>public void showKeyValue(MyList&lt;String&gt; myList){...}</code><br>
如果不确定，就写作&lt;?&gt;：<code>public void showKeyValue(MyList&lt;?&gt; myList){...}</code></li>
</ol>
<h1 id="上下界">上下界</h1>
<ul>
<li>extends和super都不能在泛型类<strong>定义</strong>时使用</li>
<li>super只能在<strong>使用泛型类对象作为参数</strong>时使用，不能用于<strong>创建泛型类对象</strong>；extends无限制</li>
</ul>
<h1 id="限制">限制</h1>
<p>详见：<a href="https://blog.csdn.net/hanchao5272/article/details/79352321">泛型使用的8个限制</a></p>
]]></content>
    </entry>
</feed>